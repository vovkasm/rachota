/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://rachota.sourceforge.net/license.txt.
 *
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://rachota.sourceforge.net/license.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * The Original Software is Rachota.
 * The Initial Developer of the Original Software is Jiri Kovalsky
 * Portions created by Jiri Kovalsky are Copyright (C) 2010
 * All Rights Reserved.
 *
 * Contributor(s): Jiri Kovalsky
 * Created on Mar 18, 2010, 8:46:50 PM
 * ReportOutputWizardStep.java
 */

package org.cesilko.rachota.gui;

import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.cesilko.rachota.core.Settings;
import org.cesilko.rachota.core.Translator;

public class ReportOutputWizardStep extends WizardStep {

    /** Creates new form ReportOutputWizardStep */
    public ReportOutputWizardStep(GenericWizard wizard) {
        super(wizard, Translator.getTranslation("REPORTWIZARD.STEP_OUTPUT"));
        initComponents();
        selectOutput(ReportWizard.OUTPUT_HTML);
        firePropertyChange("report.type", null, ReportWizard.TYPE_REPORT);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbOutput = new javax.swing.JLabel();
        rbReport = new javax.swing.JRadioButton();
        rbInvoice = new javax.swing.JRadioButton();
        lbFormat = new javax.swing.JLabel();
        rbHTML = new javax.swing.JRadioButton();
        rbTXT = new javax.swing.JRadioButton();
        rbCSV = new javax.swing.JRadioButton();
        lbFilename = new javax.swing.JLabel();
        txFilename = new javax.swing.JTextField();
        btBrowse = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        lbOutput.setFont(getFont());
        lbOutput.setLabelFor(rbReport);
        lbOutput.setText(Translator.getTranslation("REPORTWIZARD.LB_OUTPUT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lbOutput, gridBagConstraints);

        rbReport.setFont(getFont());
        rbReport.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_REPORT"));
        rbReport.setSelected(true);
        rbReport.setText(Translator.getTranslation("REPORTWIZARD.RB_REPORT"));
        rbReport.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_REPORT_TOOLTIP"));
        rbReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbReportActionPerformed(evt);
            }
        });
        rbReport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        add(rbReport, gridBagConstraints);

        rbInvoice.setFont(getFont());
        rbInvoice.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_INVOICE"));
        rbInvoice.setText(Translator.getTranslation("REPORTWIZARD.RB_INVOICE"));
        rbInvoice.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_INVOICE_TOOLTIP"));
        rbInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInvoiceActionPerformed(evt);
            }
        });
        rbInvoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        add(rbInvoice, gridBagConstraints);

        lbFormat.setFont(getFont());
        lbFormat.setText(Translator.getTranslation("REPORTWIZARD.LB_FORMAT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lbFormat, gridBagConstraints);

        rbHTML.setFont(getFont());
        rbHTML.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_HTML"));
        rbHTML.setText(Translator.getTranslation("REPORTWIZARD.RB_HTML"));
        rbHTML.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_HTML_TOOLTIP"));
        rbHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHTMLActionPerformed(evt);
            }
        });
        rbHTML.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        add(rbHTML, gridBagConstraints);

        rbTXT.setFont(getFont());
        rbTXT.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_TXT"));
        rbTXT.setText(Translator.getTranslation("REPORTWIZARD.RB_TXT"));
        rbTXT.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_TXT_TOOLTIP"));
        rbTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTXTActionPerformed(evt);
            }
        });
        rbTXT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        add(rbTXT, gridBagConstraints);

        rbCSV.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_CSV"));
        rbCSV.setFont(getFont());
        rbCSV.setText(Translator.getTranslation("REPORTWIZARD.RB_CSV"));
        rbCSV.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_CSV_TOOLTIP"));
        rbCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCSVActionPerformed(evt);
            }
        });
        rbCSV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        add(rbCSV, gridBagConstraints);

        lbFilename.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_FILENAME"));
        lbFilename.setFont(getFont());
        lbFilename.setLabelFor(txFilename);
        lbFilename.setText(Translator.getTranslation("REPORTWIZARD.LB_FILENAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lbFilename, gridBagConstraints);

        txFilename.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txFilenameFocusLost(evt);
            }
        });
        txFilename.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txFilename, gridBagConstraints);

        btBrowse.setFont(getFont());
        btBrowse.setMnemonic(Translator.getMnemonic("REPORTWIZARD.BT_BROWSE"));
        btBrowse.setText(Translator.getTranslation("REPORTWIZARD.BT_BROWSE"));
        btBrowse.setToolTipText(Translator.getTranslation("REPORTWIZARD.BT_BROWSE_TOOLTIP"));
        btBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBrowseActionPerformed(evt);
            }
        });
        btBrowse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportOutputWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        add(btBrowse, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /** Method called when user selects HTML output format.
     * @param evt Event that generated this call.
     */
    private void rbHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHTMLActionPerformed
        selectOutput(ReportWizard.OUTPUT_HTML);
    }//GEN-LAST:event_rbHTMLActionPerformed

    /** Method called when user selects TXT output format.
     * @param evt Event that generated this call.
     */
    private void rbTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTXTActionPerformed
        selectOutput(ReportWizard.OUTPUT_TXT);
    }//GEN-LAST:event_rbTXTActionPerformed

    /** Method called when user selects CSV output format.
     * @param evt Event that generated this call.
     */
    private void rbCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCSVActionPerformed
        selectOutput(ReportWizard.OUTPUT_CSV);
    }//GEN-LAST:event_rbCSVActionPerformed

    /** Method called when user clicks Browse button to select some file.
     * @param evt Event that generated this call.
     */
    private void btBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBrowseActionPerformed
        String location = (String) Settings.getDefault().getSetting("reportDir");
        if (location == null) location = (String) Settings.getDefault().getSetting("userDir");
        JFileChooser fileChooser = new JFileChooser(location);
        final String extension = selectedOutput;
        final String extensionDescription = "All *" + extension  + " files";
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return (f.isDirectory() || f.isFile() && f.getName().endsWith(extension));
            }
            @Override
            public String getDescription() {
                return extensionDescription;
            }
        });
        fileChooser.setApproveButtonText(Translator.getTranslation("HISTORYVIEW.BT_SELECT"));
        fileChooser.setApproveButtonMnemonic(Translator.getMnemonic("HISTORYVIEW.BT_SELECT"));
        fileChooser.setApproveButtonToolTipText(Translator.getTranslation("HISTORYVIEW.BT_SELECT_TOOLTIP"));
        int decision = fileChooser.showOpenDialog(this);
        if (decision != JFileChooser.APPROVE_OPTION) return;
        File file = fileChooser.getSelectedFile();
        String fileName = file.getAbsolutePath();
        if (!fileName.endsWith(extension)) file = new File(fileName + extension);
        fileName = file.getAbsolutePath();
        fileName = fileName.substring(0, fileName.indexOf("."));
        if (file.exists()) {
            String[] buttons = {Translator.getTranslation("QUESTION.BT_YES"), Translator.getTranslation("QUESTION.BT_NO")};
            decision = JOptionPane.showOptionDialog(this, Translator.getTranslation("QUESTION.OVERWRITE_FILE", new String[] {file.getName()}), Translator.getTranslation("QUESTION.QUESTION_TITLE"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, buttons, buttons[1]);
            if (decision != JOptionPane.YES_OPTION) return;
        }
        txFilename.setText(file.getAbsolutePath());
        firePropertyChange("report.output.file_selected", null, file);
    }//GEN-LAST:event_btBrowseActionPerformed

    /** Method called when cursor was in the filename textfield and user decided
     * to select another component.
     * @param evt Event that generated this call.
     */
    private void txFilenameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txFilenameFocusLost
        String fileName = txFilename.getText();
        if (fileName.equals("")) return;
        String extension = selectedOutput;
        if (!fileName.endsWith(extension)) fileName = fileName + extension;
        File file = new File(fileName);
        fileName = file.getAbsolutePath();
        fileName = fileName.substring(0, fileName.indexOf("."));
        if (file.exists()) {
            String[] buttons = {Translator.getTranslation("QUESTION.BT_YES"), Translator.getTranslation("QUESTION.BT_NO")};
            int decision = JOptionPane.showOptionDialog(this, Translator.getTranslation("QUESTION.OVERWRITE_FILE", new String[] {file.getName()}), Translator.getTranslation("QUESTION.QUESTION_TITLE"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, buttons, buttons[1]);
            if (decision != JOptionPane.YES_OPTION) return;
        }
        txFilename.setText(file.getAbsolutePath());
        firePropertyChange("report.output.file_selected", null, file);
    }//GEN-LAST:event_txFilenameFocusLost

    /** User decided to generate a report.
     * @param evt Event that generated this call.
     */
    private void rbReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbReportActionPerformed
        rbInvoice.setSelected(false);
        rbReport.setSelected(true);
        rbCSV.setEnabled(true);
        firePropertyChange("report.type", null, ReportWizard.TYPE_REPORT);
}//GEN-LAST:event_rbReportActionPerformed

    /** User decided to generate an invoice.
     * @param evt Event that generated this call.
     */
    private void rbInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInvoiceActionPerformed
        rbInvoice.setSelected(true);
        rbReport.setSelected(false);
        rbCSV.setEnabled(false);
        selectOutput(ReportWizard.OUTPUT_HTML);
        firePropertyChange("report.type", null, ReportWizard.TYPE_INVOICE);
}//GEN-LAST:event_rbInvoiceActionPerformed

    /** Method called when user pressed some key.
     * @param evt Event that generated this call.
     */
    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            firePropertyChange("wizard.step.next", null, this);
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
            firePropertyChange("wizard.cancel", null, null);
    }//GEN-LAST:event_keyPressed

    /** Method to set focus to the initial component. */
    @Override
    protected void setFocus() {
        if (txFilename != null) txFilename.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBrowse;
    private javax.swing.JLabel lbFilename;
    private javax.swing.JLabel lbFormat;
    private javax.swing.JLabel lbOutput;
    private javax.swing.JRadioButton rbCSV;
    private javax.swing.JRadioButton rbHTML;
    private javax.swing.JRadioButton rbInvoice;
    private javax.swing.JRadioButton rbReport;
    private javax.swing.JRadioButton rbTXT;
    private javax.swing.JTextField txFilename;
    // End of variables declaration//GEN-END:variables

    /** Currently selected output format. */
    private String selectedOutput = null;

    /** Method called when property of some other wizard step changed.
     * @param evt Event that generated this call.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        return;
    }

    /** Method called when user clicks some output option.
     * @param output Output that was clicked.
     */
    private void selectOutput(String output) {
        rbHTML.setSelected(output.equals(ReportWizard.OUTPUT_HTML));
        rbTXT.setSelected(output.equals(ReportWizard.OUTPUT_TXT));
        rbCSV.setSelected(output.equals(ReportWizard.OUTPUT_CSV));
        if (output.equals(selectedOutput)) return;
        selectedOutput = output;
        firePropertyChange("report.output.format_selected", null, selectedOutput);
        txFilename.setText("");
        firePropertyChange("report.output.file_selected", null, null);
    }
    
    /** Returns whether everything is set correctly in the wizard step.
     * @return True if some output file is selected.
     */
    @Override
    protected boolean isSetCorrectly() {
        if (txFilename == null) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_NO_OUTPUT_FILE"));
            return false;
        }
        if (txFilename.getText().isEmpty()) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_NO_OUTPUT_FILE"));
            return false;
        }
        firePropertyChange("status.error", null, null);
        return true;
    }
}