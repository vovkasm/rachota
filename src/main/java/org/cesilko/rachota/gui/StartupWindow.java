/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://rachota.sourceforge.net/license.txt.
 * 
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://rachota.sourceforge.net/license.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * The Original Software is Rachota.
 * The Initial Developer of the Original Software is Jiri Kovalsky
 * Portions created by Jiri Kovalsky are Copyright (C) 2007
 * All Rights Reserved.
 *
 * Contributor(s): Jiri Kovalsky
 * Created on May 25, 2007  10:01 PM
 * StartupWindow.java
 */

package org.cesilko.rachota.gui;

import java.awt.Color;
import org.cesilko.rachota.core.Translator;

/** Startup window containing splash screen (logo) and information about
 * loading progress.
 */
public class StartupWindow extends javax.swing.JFrame {
    
    /** Creates private instance of new startup window. */
    private StartupWindow() {
        initComponents();
        setLocationRelativeTo(null);
        showWindow();
    }
    
    /** Returns the only instance of startup window.
     * @return Startup window.
     */
    public static StartupWindow getInstance() {
        if (startupWindow != null) return startupWindow;
        startupWindow = new StartupWindow();
        return startupWindow;
    }
    
    /** Returns font that should be used for all widgets in this component
     * based on the language preferences specified by user.
     * @return Font to be used in this component.
     */
    public java.awt.Font getFont() {
        return Tools.getFont();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbImage = new javax.swing.JLabel(new javax.swing.ImageIcon(getClass().getResource("/org/cesilko/rachota/gui/images/logo_name_48.png")));
        lbLoading = new javax.swing.JLabel();
        pbLoading = new javax.swing.JProgressBar();
        lbDiary = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lbImage, gridBagConstraints);

        lbLoading.setFont(getFont());
        lbLoading.setText(Translator.getTranslation("MESSAGE.PROGRESS_LOADING"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lbLoading, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pbLoading, gridBagConstraints);

        lbDiary.setFont(getFont());
        lbDiary.setText("settings.cfg");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lbDiary, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel lbDiary;
    private javax.swing.JLabel lbImage;
    private static javax.swing.JLabel lbLoading;
    private static javax.swing.JProgressBar pbLoading;
    // End of variables declaration//GEN-END:variables
    /** Flag indicating whether Rachota is still loading. */
    private boolean loading = true;
    /** The only instance of startup window. */
    private static StartupWindow startupWindow = null;
    
    /** Sets total number of diaries to be read at startup.
     * @param numberOfDiaries Total number of diaries to be read.
     */
    public void setNumberOfDiaries(int numberOfDiaries) {
        pbLoading.setMaximum(numberOfDiaries);
    }
    
    /** Sets progress i.e. how many diaries have already been read so far.
     * @param numberOfReadDiaries Number of read diaries.
     */
    public void setProgress(int numberOfReadDiaries) {
        pbLoading.setValue(numberOfReadDiaries);
        if (numberOfReadDiaries == pbLoading.getMaximum()) loading = false;
    }
    
    /** Sets progress message e.g. which file is currently being loaded etc.
     * @param progressMessage Text to be shown as current startup action.
     */
    public void setProgressMessage(String progressMessage) {
        lbDiary.setText(progressMessage);
    }
    
    /** Finishes progress bar and hides window. */
    public void hideWindow() {
        pbLoading.setValue(pbLoading.getMaximum());
        loading = false;
    }
    
    /** Opens startup window and starts to fade "Please wait..." message. */
    private void showWindow() {
        setVisible(true);
        class Fader extends Thread {
            public void run() {
                boolean colorUp = true;
                int colorRGB = 0;
                while (loading) {
                    Color color = new Color(colorRGB, colorRGB, colorRGB);
                    lbLoading.setForeground(color);
                    if (colorUp) {
                        colorRGB = colorRGB + 16;
                        if (colorRGB > 255) {
                            colorRGB = 255;
                            colorUp = false;
                        }
                    } else {
                        colorRGB = colorRGB - 16;
                        if (colorRGB < 0) {
                            colorRGB = 0;
                            colorUp = true;
                        }
                    }
                    try { sleep(50); } catch (InterruptedException e) { e.printStackTrace(); }
                }
                setVisible(false);
            }
        }
        
        Fader fader = new Fader();
        fader.setPriority(Thread.MIN_PRIORITY);
        fader.start();
    }
}
