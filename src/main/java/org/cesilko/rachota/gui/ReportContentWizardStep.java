/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://rachota.sourceforge.net/license.txt.
 *
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://rachota.sourceforge.net/license.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * The Original Software is Rachota.
 * The Initial Developer of the Original Software is Jiri Kovalsky
 * Portions created by Jiri Kovalsky are Copyright (C) 2010
 * All Rights Reserved.
 *
 * Contributor(s): Jiri Kovalsky
 * Created on Mar 18, 2010, 8:46:50 PM
 * ReportTypeWizardStep.java
 */

package org.cesilko.rachota.gui;

import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.util.Vector;
import org.cesilko.rachota.core.Translator;

public class ReportContentWizardStep extends WizardStep {

    /** Creates new form ReportTypeWizardStep */
    public ReportContentWizardStep(GenericWizard wizard) {
        super(wizard, Translator.getTranslation("REPORTWIZARD.STEP_CONTENT"));
        initComponents();
        pnInvoice.setVisible(false);
        cbDurationActionPerformed(null);
        String outputFormat = (String) ReportWizard.getWizardProperty("report.output.format_selected");
        cbTimesChart.setEnabled(ReportWizard.OUTPUT_HTML.equals(outputFormat));
    }

    /** Returns font that should be used for all widgets in this component
     * based on the language preferences specified by user.
     * @return Font to be used in this component.
     */
    @Override
    public java.awt.Font getFont() {
        return Tools.getFont();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnReport = new javax.swing.JPanel();
        lbReportTitle = new javax.swing.JLabel();
        txReportTitle = new javax.swing.JTextField();
        lbShow = new javax.swing.JLabel();
        cbTimesChart = new javax.swing.JCheckBox();
        cbFilters = new javax.swing.JCheckBox();
        lbRows = new javax.swing.JLabel();
        rbReportTasks = new javax.swing.JRadioButton();
        rbReportProjects = new javax.swing.JRadioButton();
        lbReportInclude = new javax.swing.JLabel();
        cbDuration = new javax.swing.JCheckBox();
        cbOccurrences = new javax.swing.JCheckBox();
        cbProjectsTasks = new javax.swing.JCheckBox();
        cbNotes = new javax.swing.JCheckBox();
        lbSortBy = new javax.swing.JLabel();
        cmbSortBy = new javax.swing.JComboBox();
        pnInvoice = new javax.swing.JPanel();
        lbInvoiceTitle = new javax.swing.JLabel();
        txInvoiceTitle = new javax.swing.JTextField();
        lbDueDate = new javax.swing.JLabel();
        spDueDate = new javax.swing.JSpinner();
        lbDueDays = new javax.swing.JLabel();
        lbPrice = new javax.swing.JLabel();
        txPrice = new javax.swing.JTextField();
        lbCurrency = new javax.swing.JLabel();
        txCurrency = new javax.swing.JTextField();
        lbTax = new javax.swing.JLabel();
        txTax = new javax.swing.JTextField();
        lbTaxPercentage = new javax.swing.JLabel();
        lbInvoiceInclude = new javax.swing.JLabel();
        rbInvoiceProjectsTasks = new javax.swing.JRadioButton();
        rbInvoiceTasks = new javax.swing.JRadioButton();
        lbCustomerDetails = new javax.swing.JLabel();
        spCustomerDetails = new javax.swing.JScrollPane();
        taCustomerDetails = new javax.swing.JTextArea();
        lbYourDetails = new javax.swing.JLabel();
        spYourDetails = new javax.swing.JScrollPane();
        taYourDetails = new javax.swing.JTextArea();
        lbPaymentDetails = new javax.swing.JLabel();
        spPaymentDetails = new javax.swing.JScrollPane();
        taPaymentDetails = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        pnReport.setLayout(new java.awt.GridBagLayout());

        lbReportTitle.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_REPORT_TITLE"));
        lbReportTitle.setFont(getFont());
        lbReportTitle.setLabelFor(txReportTitle);
        lbReportTitle.setText(Translator.getTranslation("REPORTWIZARD.LB_REPORT_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(lbReportTitle, gridBagConstraints);

        txReportTitle.setFont(getFont());
        txReportTitle.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_REPORT_TITLE_TOOLTIP"));
        txReportTitle.setPreferredSize(new java.awt.Dimension(150, 27));
        txReportTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(txReportTitle, gridBagConstraints);

        lbShow.setFont(getFont());
        lbShow.setLabelFor(cbTimesChart);
        lbShow.setText(Translator.getTranslation("REPORTWIZARD.LB_SHOW"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(lbShow, gridBagConstraints);

        cbTimesChart.setFont(getFont());
        cbTimesChart.setMnemonic(Translator.getMnemonic("REPORTWIZARD.CB_TIMES_CHART"));
        cbTimesChart.setSelected(true);
        cbTimesChart.setText(Translator.getTranslation("REPORTWIZARD.CB_TIMES_CHART"));
        cbTimesChart.setToolTipText(Translator.getTranslation("REPORTWIZARD.CB_TIMES_CHART_TOOLTIP"));
        cbTimesChart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cbTimesChart, gridBagConstraints);

        cbFilters.setFont(getFont());
        cbFilters.setMnemonic(Translator.getMnemonic("REPORTWIZARD.CB_FILTERS"));
        cbFilters.setText(Translator.getTranslation("REPORTWIZARD.CB_FILTERS"));
        cbFilters.setToolTipText(Translator.getTranslation("REPORTWIZARD.CB_FILTERS_TOOLTIP"));
        cbFilters.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cbFilters, gridBagConstraints);

        lbRows.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_ROWS"));
        lbRows.setFont(getFont());
        lbRows.setLabelFor(rbReportTasks);
        lbRows.setText(Translator.getTranslation("REPORTWIZARD.LB_ROWS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(lbRows, gridBagConstraints);

        rbReportTasks.setFont(getFont());
        rbReportTasks.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_TASKS"));
        rbReportTasks.setSelected(true);
        rbReportTasks.setText(Translator.getTranslation("REPORTWIZARD.RB_TASKS"));
        rbReportTasks.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_TASKS_TOOLTIP"));
        rbReportTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbReportTasksActionPerformed(evt);
            }
        });
        rbReportTasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(rbReportTasks, gridBagConstraints);

        rbReportProjects.setFont(getFont());
        rbReportProjects.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_PROJECTS"));
        rbReportProjects.setText(Translator.getTranslation("REPORTWIZARD.RB_PROJECTS"));
        rbReportProjects.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_PROJECTS_TOOLTIP"));
        rbReportProjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbReportProjectsActionPerformed(evt);
            }
        });
        rbReportProjects.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(rbReportProjects, gridBagConstraints);

        lbReportInclude.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_INCLUDE"));
        lbReportInclude.setFont(getFont());
        lbReportInclude.setLabelFor(cbDuration);
        lbReportInclude.setText(Translator.getTranslation("REPORTWIZARD.LB_INCLUDE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(lbReportInclude, gridBagConstraints);

        cbDuration.setFont(getFont());
        cbDuration.setMnemonic(Translator.getMnemonic("REPORTWIZARD.CB_DURATION"));
        cbDuration.setSelected(true);
        cbDuration.setText(Translator.getTranslation("REPORTWIZARD.CB_DURATION"));
        cbDuration.setToolTipText(Translator.getTranslation("REPORTWIZARD.CB_DURATION_TOOLTIP"));
        cbDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDurationActionPerformed(evt);
            }
        });
        cbDuration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cbDuration, gridBagConstraints);

        cbOccurrences.setFont(getFont());
        cbOccurrences.setMnemonic(Translator.getMnemonic("REPORTWIZARD.CB_OCCURRENCES"));
        cbOccurrences.setText(Translator.getTranslation("REPORTWIZARD.CB_OCCURRENCES"));
        cbOccurrences.setToolTipText(Translator.getTranslation("REPORTWIZARD.CB_OCCURRENCES_TOOLTIP"));
        cbOccurrences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOccurrencesActionPerformed(evt);
            }
        });
        cbOccurrences.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cbOccurrences, gridBagConstraints);

        cbProjectsTasks.setFont(getFont());
        cbProjectsTasks.setMnemonic(Translator.getMnemonic("REPORTWIZARD.CB_PROJECTS_TASKS"));
        cbProjectsTasks.setText(Translator.getTranslation("REPORTWIZARD.CB_PROJECTS_TASKS"));
        cbProjectsTasks.setToolTipText(Translator.getTranslation("REPORTWIZARD.CB_PROJECTS_TASKS_TOOLTIP"));
        cbProjectsTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProjectsTasksActionPerformed(evt);
            }
        });
        cbProjectsTasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cbProjectsTasks, gridBagConstraints);

        cbNotes.setFont(getFont());
        cbNotes.setMnemonic(Translator.getMnemonic("REPORTWIZARD.CB_NOTES"));
        cbNotes.setText(Translator.getTranslation("REPORTWIZARD.CB_NOTES"));
        cbNotes.setToolTipText(Translator.getTranslation("REPORTWIZARD.CB_NOTES_TOOLTIP"));
        cbNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNotesActionPerformed(evt);
            }
        });
        cbNotes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cbNotes, gridBagConstraints);

        lbSortBy.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_SORTBY"));
        lbSortBy.setFont(getFont());
        lbSortBy.setLabelFor(cmbSortBy);
        lbSortBy.setText(Translator.getTranslation("REPORTWIZARD.LB_SORTBY"));
        lbSortBy.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_SORTBY_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(lbSortBy, gridBagConstraints);

        cmbSortBy.setFont(getFont());
        cmbSortBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnReport.add(cmbSortBy, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pnReport, gridBagConstraints);

        pnInvoice.setLayout(new java.awt.GridBagLayout());

        lbInvoiceTitle.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_INVOICE_TITLE"));
        lbInvoiceTitle.setFont(getFont());
        lbInvoiceTitle.setLabelFor(txInvoiceTitle);
        lbInvoiceTitle.setText(Translator.getTranslation("REPORTWIZARD.LB_INVOICE_TITLE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbInvoiceTitle, gridBagConstraints);

        txInvoiceTitle.setFont(getFont());
        txInvoiceTitle.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_INVOICE_TITLE_TOOLTIP"));
        txInvoiceTitle.setPreferredSize(new java.awt.Dimension(150, 27));
        txInvoiceTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(txInvoiceTitle, gridBagConstraints);

        lbDueDate.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_DUEDATE"));
        lbDueDate.setFont(getFont());
        lbDueDate.setLabelFor(spDueDate);
        lbDueDate.setText(Translator.getTranslation("REPORTWIZARD.LB_DUEDATE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbDueDate, gridBagConstraints);

        spDueDate.setFont(getFont());
        spDueDate.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_DUEDATE_TOOLTIP"));
        spDueDate.setValue(new Integer(14));
        spDueDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spDueDateStateChanged(evt);
            }
        });
        spDueDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(spDueDate, gridBagConstraints);

        lbDueDays.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_DUEDAYS"));
        lbDueDays.setFont(getFont());
        lbDueDays.setText(Translator.getTranslation("REPORTWIZARD.LB_DUEDAYS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbDueDays, gridBagConstraints);

        lbPrice.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_PRICE"));
        lbPrice.setFont(getFont());
        lbPrice.setLabelFor(txPrice);
        lbPrice.setText(Translator.getTranslation("REPORTWIZARD.LB_PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbPrice, gridBagConstraints);

        txPrice.setFont(getFont());
        txPrice.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_PRICE_TOOLTIP"));
        txPrice.setMinimumSize(new java.awt.Dimension(50, 27));
        txPrice.setPreferredSize(new java.awt.Dimension(50, 27));
        txPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txPriceFocusLost(evt);
            }
        });
        txPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(txPrice, gridBagConstraints);

        lbCurrency.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_CURRENCY"));
        lbCurrency.setFont(getFont());
        lbCurrency.setLabelFor(txCurrency);
        lbCurrency.setText(Translator.getTranslation("REPORTWIZARD.LB_CURRENCY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbCurrency, gridBagConstraints);

        txCurrency.setFont(getFont());
        txCurrency.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_CURRENCY_TOOLTIP"));
        txCurrency.setMinimumSize(new java.awt.Dimension(50, 27));
        txCurrency.setPreferredSize(new java.awt.Dimension(50, 27));
        txCurrency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txCurrencyFocusLost(evt);
            }
        });
        txCurrency.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(txCurrency, gridBagConstraints);

        lbTax.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_TAX"));
        lbTax.setFont(getFont());
        lbTax.setLabelFor(txTax);
        lbTax.setText(Translator.getTranslation("REPORTWIZARD.LB_TAX"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbTax, gridBagConstraints);

        txTax.setFont(getFont());
        txTax.setText("0");
        txTax.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_TAX_TOOLTIP"));
        txTax.setMinimumSize(new java.awt.Dimension(50, 27));
        txTax.setPreferredSize(new java.awt.Dimension(50, 27));
        txTax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txTaxFocusLost(evt);
            }
        });
        txTax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(txTax, gridBagConstraints);

        lbTaxPercentage.setFont(getFont());
        lbTaxPercentage.setText(Translator.getTranslation("REPORTWIZARD.LB_TAX_PERCENTAGE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbTaxPercentage, gridBagConstraints);

        lbInvoiceInclude.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_INCLUDE"));
        lbInvoiceInclude.setFont(getFont());
        lbInvoiceInclude.setLabelFor(rbInvoiceProjectsTasks);
        lbInvoiceInclude.setText(Translator.getTranslation("REPORTWIZARD.LB_INCLUDE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbInvoiceInclude, gridBagConstraints);

        rbInvoiceProjectsTasks.setFont(getFont());
        rbInvoiceProjectsTasks.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_INVOICE_PROJECTS_TASKS"));
        rbInvoiceProjectsTasks.setSelected(true);
        rbInvoiceProjectsTasks.setText(Translator.getTranslation("REPORTWIZARD.RB_INVOICE_PROJECTS_TASKS"));
        rbInvoiceProjectsTasks.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_INVOICE_PROJECTS_TASKS_TOOLTIP"));
        rbInvoiceProjectsTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInvoiceProjectsTasksActionPerformed(evt);
            }
        });
        rbInvoiceProjectsTasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(rbInvoiceProjectsTasks, gridBagConstraints);

        rbInvoiceTasks.setMnemonic(Translator.getMnemonic("REPORTWIZARD.RB_INVOICE_TASKS"));
        rbInvoiceTasks.setFont(getFont());
        rbInvoiceTasks.setText(Translator.getTranslation("REPORTWIZARD.RB_INVOICE_TASKS"));
        rbInvoiceTasks.setToolTipText(Translator.getTranslation("REPORTWIZARD.RB_INVOICE_TASKS_TOOLTIP"));
        rbInvoiceTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInvoiceTasksActionPerformed(evt);
            }
        });
        rbInvoiceTasks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ReportContentWizardStep.this.keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(rbInvoiceTasks, gridBagConstraints);

        lbCustomerDetails.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_CUSTOMER_DETAILS"));
        lbCustomerDetails.setFont(getFont());
        lbCustomerDetails.setLabelFor(spCustomerDetails);
        lbCustomerDetails.setText(Translator.getTranslation("REPORTWIZARD.LB_CUSTOMER_DETAILS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbCustomerDetails, gridBagConstraints);

        taCustomerDetails.setColumns(20);
        taCustomerDetails.setRows(2);
        taCustomerDetails.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_CUSTOMER_DETAILS_TOOLTIP"));
        spCustomerDetails.setViewportView(taCustomerDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(spCustomerDetails, gridBagConstraints);

        lbYourDetails.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_YOUR_DETAILS"));
        lbYourDetails.setFont(getFont());
        lbYourDetails.setLabelFor(spYourDetails);
        lbYourDetails.setText(Translator.getTranslation("REPORTWIZARD.LB_YOUR_DETAILS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbYourDetails, gridBagConstraints);

        taYourDetails.setColumns(20);
        taYourDetails.setRows(2);
        taYourDetails.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_YOUR_DETAILS_TOOLTIP"));
        spYourDetails.setViewportView(taYourDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(spYourDetails, gridBagConstraints);

        lbPaymentDetails.setDisplayedMnemonic(Translator.getMnemonic("REPORTWIZARD.LB_PAYMENT_DETAILS"));
        lbPaymentDetails.setFont(getFont());
        lbPaymentDetails.setLabelFor(spPaymentDetails);
        lbPaymentDetails.setText(Translator.getTranslation("REPORTWIZARD.LB_PAYMENT_DETAILS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(lbPaymentDetails, gridBagConstraints);

        taPaymentDetails.setColumns(20);
        taPaymentDetails.setRows(2);
        taPaymentDetails.setToolTipText(Translator.getTranslation("REPORTWIZARD.LB_PAYMENT_DETAILS_TOOLTIP"));
        spPaymentDetails.setViewportView(taPaymentDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnInvoice.add(spPaymentDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pnInvoice, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    /** Method called when user wants that table rows represent tasks.
     * @param evt Event that generated this call.
     */
    private void rbReportTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbReportTasksActionPerformed
        rbReportTasks.setSelected(true);
        rbReportProjects.setSelected(false);
        firePropertyChange("report.rows", null, ReportWizard.REPORT_ROWS_TASKS);
    }//GEN-LAST:event_rbReportTasksActionPerformed

    /** Method called when user wants that table rows represent projects.
     * @param evt Event that generated this call.
     */
    private void rbReportProjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbReportProjectsActionPerformed
        rbReportProjects.setSelected(true);
        rbReportTasks.setSelected(false);
        firePropertyChange("report.rows", null, ReportWizard.REPORT_ROWS_PROJECTS);
    }//GEN-LAST:event_rbReportProjectsActionPerformed

    /** Method called when user wants to (not)include duration for each row.
     * @param evt Event that generated this call.
     */
    private void cbDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDurationActionPerformed
        if (cbDuration.isSelected()) {
            sortBy.add(ReportWizard.SORTBY_DURATION);
            cmbSortBy.addItem(Translator.getTranslation("REPORTWIZARD.CB_DURATION"));
            cmbSortBy.setEnabled(true);
        } else {
            sortBy.remove(ReportWizard.SORTBY_DURATION);
            cmbSortBy.removeItem(Translator.getTranslation("REPORTWIZARD.CB_DURATION"));
            if (cmbSortBy.getItemCount() == 0) cmbSortBy.setEnabled(false);
        }
        firePropertyChange("report.content.duration", null, cbDuration.isSelected());
    }//GEN-LAST:event_cbDurationActionPerformed

    /** Method called when user wants to (not)enumerate projects/tasks for each row.
     * @param evt Event that generated this call.
     */
    private void cbProjectsTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProjectsTasksActionPerformed
        if (cbProjectsTasks.isSelected()) {
            sortBy.add(ReportWizard.SORTBY_PROJECTS_TASKS);
            cmbSortBy.addItem(Translator.getTranslation("REPORTWIZARD.CB_PROJECTS_TASKS"));
            cmbSortBy.setEnabled(true);
        } else {
            sortBy.remove(ReportWizard.SORTBY_PROJECTS_TASKS);
            cmbSortBy.removeItem(Translator.getTranslation("REPORTWIZARD.CB_PROJECTS_TASKS"));
            if (cmbSortBy.getItemCount() == 0) cmbSortBy.setEnabled(false);
        }
        firePropertyChange("report.content.projects_tasks", null, cbProjectsTasks.isSelected());
    }//GEN-LAST:event_cbProjectsTasksActionPerformed

    /** Method called when user wants to (not)include number of occurrences for each row.
     * @param evt Event that generated this call.
     */
    private void cbOccurrencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOccurrencesActionPerformed
        if (cbOccurrences.isSelected()) {
            sortBy.add(ReportWizard.SORTBY_OCCURRENCES);
            cmbSortBy.addItem(Translator.getTranslation("REPORTWIZARD.CB_OCCURRENCES"));
            cmbSortBy.setEnabled(true);
        } else {
            sortBy.remove(ReportWizard.SORTBY_OCCURRENCES);
            cmbSortBy.removeItem(Translator.getTranslation("REPORTWIZARD.CB_OCCURRENCES"));
            if (cmbSortBy.getItemCount() == 0) cmbSortBy.setEnabled(false);
        }
        firePropertyChange("report.content.occurrences", null, cbOccurrences.isSelected());
    }//GEN-LAST:event_cbOccurrencesActionPerformed

    /** Method called when user wants to (not)include notes for each row.
     * @param evt Event that generated this call.
     */
    private void cbNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNotesActionPerformed
        if (cbNotes.isSelected()) {
            sortBy.add(ReportWizard.SORTBY_NOTES);
            cmbSortBy.addItem(Translator.getTranslation("REPORTWIZARD.CB_NOTES"));
            cmbSortBy.setEnabled(true);
        } else {
            sortBy.remove(ReportWizard.SORTBY_NOTES);
            cmbSortBy.removeItem(Translator.getTranslation("REPORTWIZARD.CB_NOTES"));
            if (cmbSortBy.getItemCount() == 0) cmbSortBy.setEnabled(false);
        }
        firePropertyChange("report.content.notes", null, cbNotes.isSelected());
    }//GEN-LAST:event_cbNotesActionPerformed

    /** User wants to list tasks grouped in projects.
     * @param evt Event that generated this call.
     */
    private void rbInvoiceProjectsTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInvoiceProjectsTasksActionPerformed
        rbInvoiceTasks.setSelected(false);
        rbInvoiceProjectsTasks.setSelected(true);
        firePropertyChange("invoice.content", null, ReportWizard.INVOICE_TASKS_PROJECTS);
    }//GEN-LAST:event_rbInvoiceProjectsTasksActionPerformed

    /** User wants to list only individual tasks.
     * @param evt Event that generated this call.
     */
    private void rbInvoiceTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInvoiceTasksActionPerformed
        rbInvoiceTasks.setSelected(true);
        rbInvoiceProjectsTasks.setSelected(false);
        firePropertyChange("invoice.content", null, ReportWizard.INVOICE_TASKS);
    }//GEN-LAST:event_rbInvoiceTasksActionPerformed

    /** Method called when Currency textfield loses its focus.
     * @param evt Event that generated this call.
     */
    private void txCurrencyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCurrencyFocusLost
        String currency = txCurrency.getText();
        firePropertyChange("invoice.currency", null, currency);
    }//GEN-LAST:event_txCurrencyFocusLost

    /** Method called when Currency textfield loses its focus.
     * @param evt Event that generated this call.
     */
    private void txTaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txTaxFocusLost
        String tax = txTax.getText();
        firePropertyChange("invoice.tax", null, tax);
    }//GEN-LAST:event_txTaxFocusLost

    /** Method called when Currency textfield loses its focus.
     * @param evt Event that generated this call.
     */
    private void txPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPriceFocusLost
        String price = txPrice.getText();
        firePropertyChange("invoice.price", null, price);
    }//GEN-LAST:event_txPriceFocusLost

    /** Method called when user pressed some key.
     * @param evt Event that generated this call.
     */
    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setProperties();
            firePropertyChange("wizard.step.next", null, this);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
            firePropertyChange("wizard.cancel", null, null);
    }//GEN-LAST:event_keyPressed

    private void spDueDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spDueDateStateChanged
        Integer dueDays = (Integer) spDueDate.getValue();
        int value = dueDays.intValue();
        if (value < 0) spDueDate.setValue(previousDueDays);
        else previousDueDays = dueDays;
    }//GEN-LAST:event_spDueDateStateChanged

    /** Method called when property of some other wizard step changed.
     * @param evt Event that generated this call.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("report.type")) {
            if (evt.getNewValue().equals(ReportWizard.TYPE_REPORT)) {
                pnReport.setVisible(true);
                pnInvoice.setVisible(false);
            }
            if (evt.getNewValue().equals(ReportWizard.TYPE_INVOICE)) {
                pnInvoice.setVisible(true);
                pnReport.setVisible(false);
            }
        }
        if (evt.getPropertyName().equals("report.output.format_selected")) {
            cbTimesChart.setEnabled(ReportWizard.OUTPUT_HTML.equals(evt.getNewValue()));
        }
        if (evt.getPropertyName().equals("wizard_finished"))
            setProperties();
    }

    /** Returns whether everything is set correctly in the wizard step.
     * @return True if wizard step is set correctly.
     */
    protected boolean isSetCorrectly() {
        if (pnReport.isShowing()) {
            firePropertyChange("status.error", null, null);
            return true;
        }
        if (txPrice == null) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_NO_PRICE"));
            return false;
        }
        String price = txPrice.getText();
        if (price.isEmpty()) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_NO_PRICE"));
            return false;
        }
        try { Float.parseFloat(price); }
        catch (NumberFormatException exception) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_PRICE_NOT_NUMBER"));
            return false;
        }
        if (txTax == null) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_NO_TAX"));
            return false;
        }
        String tax = txTax.getText();
        if (tax.isEmpty()) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_NO_TAX"));
            return false;
        }
        try { Float.parseFloat(tax); }
        catch (NumberFormatException exception) {
            firePropertyChange("status.error", null, Translator.getTranslation("REPORTWIZARD.STATUS_TAX_NOT_NUMBER"));
            return false;
        }
        firePropertyChange("status.error", null, null);
        return true;
    }

    /** Method to set focus to the initial component. */
    @Override
    protected void setFocus() {
        if (pnInvoice.isVisible()) txInvoiceTitle.requestFocus();
        else txReportTitle.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbDuration;
    private javax.swing.JCheckBox cbFilters;
    private javax.swing.JCheckBox cbNotes;
    private javax.swing.JCheckBox cbOccurrences;
    private javax.swing.JCheckBox cbProjectsTasks;
    private javax.swing.JCheckBox cbTimesChart;
    private javax.swing.JComboBox cmbSortBy;
    private javax.swing.JLabel lbCurrency;
    private javax.swing.JLabel lbCustomerDetails;
    private javax.swing.JLabel lbDueDate;
    private javax.swing.JLabel lbDueDays;
    private javax.swing.JLabel lbInvoiceInclude;
    private javax.swing.JLabel lbInvoiceTitle;
    private javax.swing.JLabel lbPaymentDetails;
    private javax.swing.JLabel lbPrice;
    private javax.swing.JLabel lbReportInclude;
    private javax.swing.JLabel lbReportTitle;
    private javax.swing.JLabel lbRows;
    private javax.swing.JLabel lbShow;
    private javax.swing.JLabel lbSortBy;
    private javax.swing.JLabel lbTax;
    private javax.swing.JLabel lbTaxPercentage;
    private javax.swing.JLabel lbYourDetails;
    private javax.swing.JPanel pnInvoice;
    private javax.swing.JPanel pnReport;
    private javax.swing.JRadioButton rbInvoiceProjectsTasks;
    private javax.swing.JRadioButton rbInvoiceTasks;
    private javax.swing.JRadioButton rbReportProjects;
    private javax.swing.JRadioButton rbReportTasks;
    private javax.swing.JScrollPane spCustomerDetails;
    private javax.swing.JSpinner spDueDate;
    private javax.swing.JScrollPane spPaymentDetails;
    private javax.swing.JScrollPane spYourDetails;
    private javax.swing.JTextArea taCustomerDetails;
    private javax.swing.JTextArea taPaymentDetails;
    private javax.swing.JTextArea taYourDetails;
    private javax.swing.JTextField txCurrency;
    private javax.swing.JTextField txInvoiceTitle;
    private javax.swing.JTextField txPrice;
    private javax.swing.JTextField txReportTitle;
    private javax.swing.JTextField txTax;
    // End of variables declaration//GEN-END:variables

    private Integer previousDueDays = new Integer(14); // Last valid number of due days for backup reasons
    private Vector sortBy = new Vector(); // Copy of selectable sorting options in English

    private void setProperties() {
        if (pnReport.isVisible()) {
            firePropertyChange("report.title", null, txReportTitle.getText());
            firePropertyChange("report.chart", null, cbTimesChart.isEnabled() & cbTimesChart.isSelected());
            firePropertyChange("report.filters", null, cbFilters.isSelected());
            if (rbReportTasks.isSelected()) firePropertyChange("report.rows", null, ReportWizard.REPORT_ROWS_TASKS);
            else firePropertyChange("report.rows", null, ReportWizard.REPORT_ROWS_PROJECTS);
            firePropertyChange("report.content.duration", null, cbDuration.isSelected());
            firePropertyChange("report.content.projects_tasks", null, cbProjectsTasks.isSelected());
            firePropertyChange("report.content.occurrences", null, cbOccurrences.isSelected());
            firePropertyChange("report.content.notes", null, cbNotes.isSelected());
            int selectedIndex = cmbSortBy.getSelectedIndex();
            firePropertyChange("report.sortby", null, (selectedIndex == -1 ? null : sortBy.get(selectedIndex)));
        } else {
            firePropertyChange("invoice.title", null, txInvoiceTitle.getText());
            firePropertyChange("invoice.details.user", null, taYourDetails.getText());
            firePropertyChange("invoice.details.customer", null, taCustomerDetails.getText());
            firePropertyChange("invoice.details.payment", null, taPaymentDetails.getText());
            firePropertyChange("invoice.due_days", null, spDueDate.getValue());
            firePropertyChange("invoice.price", null, txPrice.getText());
            firePropertyChange("invoice.currency", null, txCurrency.getText());
            firePropertyChange("invoice.tax", null, txTax.getText());
            if (rbInvoiceProjectsTasks.isSelected()) firePropertyChange("invoice.rows", null, ReportWizard.INVOICE_TASKS_PROJECTS);
            else firePropertyChange("invoice.rows", null, ReportWizard.INVOICE_TASKS);
        }
    }

}