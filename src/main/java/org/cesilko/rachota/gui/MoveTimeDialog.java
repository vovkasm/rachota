/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://rachota.sourceforge.net/license.txt.
 * 
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://rachota.sourceforge.net/license.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * The Original Software is Rachota.
 * The Initial Developer of the Original Software is Jiri Kovalsky
 * Portions created by Jiri Kovalsky are Copyright (C) 2006
 * All Rights Reserved.
 *
 * Contributor(s): Jiri Kovalsky
 * Created on June 9, 2005  9:05 AM
 * MoveTimeDialog.java
 */

package org.cesilko.rachota.gui;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.swing.SwingUtilities;
import org.cesilko.rachota.core.Day;
import org.cesilko.rachota.core.Task;
import org.cesilko.rachota.core.Translator;

/** Dialog for user friendly transfer of time from one task to another one.
 * @author Jiri Kovalsky
 */
public class MoveTimeDialog extends javax.swing.JDialog {
    
    /** Creates new dialog for moving time between two tasks.
     * @param task Source task whose time will be transferred to another task.
     * @param day Day on which the task to be moved occurs
     */
    public MoveTimeDialog(java.awt.Frame parent, Task task, Day day) {
        this.task = task;
        initComponents();
        setLocationRelativeTo(parent);

        Iterator iterator = day.getTasks().iterator();
        while (iterator.hasNext()) {
            task = (Task) iterator.next();
            // htietgens: next line deactivated to shop up IdleTask in MoveTimeDialog
            // if (task.isIdleTask()) continue;
            if (task.equals(this.task)) continue;
            cmbSelectTask.addItem(task);
        }
        Dimension size = spHours.getPreferredSize();
        spHours.setPreferredSize(new Dimension((int) size.getWidth()*2, (int) size.getHeight()));
        spMinutes.setPreferredSize(new Dimension((int) size.getWidth()*2, (int) size.getHeight()));
        spSeconds.setPreferredSize(new Dimension((int) size.getWidth()*2, (int) size.getHeight()));

        Tools.setupSelectAllListener(spHours);
        Tools.setupSelectAllListener(spMinutes);
        Tools.setupSelectAllListener(spSeconds);
        getRootPane().setDefaultButton(btOK);
        pack();
    }

    /** Returns font that should be used for all widgets in this component
     * based on the language preferences specified by user.
     * @return Font to be used in this component.
     */
    public java.awt.Font getFont() {
        return Tools.getFont();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lbSelectTask = new javax.swing.JLabel();
        cmbSelectTask = new javax.swing.JComboBox();
        lbSelectTime = new javax.swing.JLabel();
        spHours = new javax.swing.JSpinner();
        lbColumn1 = new javax.swing.JLabel();
        spMinutes = new javax.swing.JSpinner();
        lbColumn2 = new javax.swing.JLabel();
        spSeconds = new javax.swing.JSpinner();
        pnButtons = new javax.swing.JPanel();
        btOK = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(Translator.getTranslation("MOVETIMEDIALOG.TITLE"));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lbSelectTask.setDisplayedMnemonic(Translator.getMnemonic("MOVETIMEDIALOG.SELECT_TASK"));
        lbSelectTask.setFont(getFont());
        lbSelectTask.setLabelFor(cmbSelectTask);
        lbSelectTask.setText(Translator.getTranslation("MOVETIMEDIALOG.SELECT_TASK"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lbSelectTask, gridBagConstraints);

        cmbSelectTask.setFont(getFont());
        cmbSelectTask.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.SELECT_TASK_TOOLTIP"));
        cmbSelectTask.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSelectTaskKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cmbSelectTask, gridBagConstraints);

        lbSelectTime.setDisplayedMnemonic(Translator.getMnemonic("MOVETIMEDIALOG.SELECT_TIME"));
        lbSelectTime.setFont(getFont());
        lbSelectTime.setLabelFor(spHours);
        lbSelectTime.setText(Translator.getTranslation("MOVETIMEDIALOG.SELECT_TIME"));
        lbSelectTime.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.SELECT_TIME_TOOLTIP"));
        lbSelectTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbSelectTimeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lbSelectTime, gridBagConstraints);

        spHours.setFont(getFont());
        spHours.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.HOURS_TOOLTIP"));
        spHours.setMinimumSize(new java.awt.Dimension(40, 20));
        spHours.setPreferredSize(new java.awt.Dimension(40, 20));
        spHours.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spHoursStateChanged(evt);
            }
        });
        spHours.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spHoursKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spHours, gridBagConstraints);

        lbColumn1.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        getContentPane().add(lbColumn1, gridBagConstraints);

        spMinutes.setFont(getFont());
        spMinutes.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.MINUTES_TOOLTIP"));
        spMinutes.setMinimumSize(new java.awt.Dimension(40, 20));
        spMinutes.setPreferredSize(new java.awt.Dimension(40, 20));
        spMinutes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spMinutesStateChanged(evt);
            }
        });
        spMinutes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spMinutesKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spMinutes, gridBagConstraints);

        lbColumn2.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        getContentPane().add(lbColumn2, gridBagConstraints);

        spSeconds.setFont(getFont());
        spSeconds.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.SECONDS_TOOLTIP"));
        spSeconds.setMinimumSize(new java.awt.Dimension(40, 20));
        spSeconds.setPreferredSize(new java.awt.Dimension(40, 20));
        spSeconds.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spSecondsStateChanged(evt);
            }
        });
        spSeconds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spSecondsKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spSeconds, gridBagConstraints);

        btOK.setFont(getFont());
        btOK.setMnemonic(Translator.getMnemonic("MOVETIMEDIALOG.BT_OK"));
        btOK.setText(Translator.getTranslation("MOVETIMEDIALOG.BT_OK"));
        btOK.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.BT_OK_TOOLTIP"));
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOKActionPerformed(evt);
            }
        });
        pnButtons.add(btOK);

        btCancel.setFont(getFont());
        btCancel.setMnemonic(Translator.getMnemonic("MOVETIMEDIALOG.BT_CANCEL"));
        btCancel.setText(Translator.getTranslation("MOVETIMEDIALOG.BT_CANCEL"));
        btCancel.setToolTipText(Translator.getTranslation("MOVETIMEDIALOG.BT_CANCEL_TOOLTIP"));
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });
        pnButtons.add(btCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        getContentPane().add(pnButtons, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void spSecondsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spSecondsKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        btOKActionPerformed(null);
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
        btCancelActionPerformed(null);
}//GEN-LAST:event_spSecondsKeyPressed

private void spMinutesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spMinutesKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        btOKActionPerformed(null);
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
        btCancelActionPerformed(null);
}//GEN-LAST:event_spMinutesKeyPressed

private void spHoursKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spHoursKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        btOKActionPerformed(null);
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
        btCancelActionPerformed(null);
}//GEN-LAST:event_spHoursKeyPressed

private void cmbSelectTaskKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSelectTaskKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        btOKActionPerformed(null);
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
        btCancelActionPerformed(null);
                        }//GEN-LAST:event_cmbSelectTaskKeyPressed
    /** Method called when seconds were be changed.
     * @param evt Event that invoked this method call.
     */
    private void spSecondsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spSecondsStateChanged
        Integer seconds = (Integer) spSeconds.getValue();//GEN-HEADEREND:event_spSecondsStateChanged
        int value = seconds.intValue();
        if ((value < 0) || (value > 59)) spSeconds.setValue(previousSeconds);
        else checkDuration();
    }//GEN-LAST:event_spSecondsStateChanged
    
    /** Method called when minutes were be changed.
     * @param evt Event that invoked this method call.
     */
    private void spMinutesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spMinutesStateChanged
        Integer minutes = (Integer) spMinutes.getValue();//GEN-HEADEREND:event_spMinutesStateChanged
        int value = minutes.intValue();
        if ((value < 0) || (value > 59)) spMinutes.setValue(previousMinutes);
        else checkDuration();
    }//GEN-LAST:event_spMinutesStateChanged
    
    /** Method called when hours were be changed.
     * @param evt Event that invoked this method call.
     */
    private void spHoursStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spHoursStateChanged
        Integer hours = (Integer) spHours.getValue();//GEN-HEADEREND:event_spHoursStateChanged
        int value = hours.intValue();
        if ((value < 0) || (value > 23)) spHours.setValue(previousHours);
        else checkDuration();
    }//GEN-LAST:event_spHoursStateChanged
    
    /** Method called when cancel button was pressed.
     * @param evt Event that invoked this method call.
     */
    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        setVisible(false);//GEN-HEADEREND:event_btCancelActionPerformed
    }//GEN-LAST:event_btCancelActionPerformed
    
    /** Method called when ok button was pressed.
     * @param evt Event that invoked this method call.
     */
    private void btOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOKActionPerformed
        setVisible(false);//GEN-HEADEREND:event_btOKActionPerformed
        Task targetTask = (Task) cmbSelectTask.getSelectedItem();
        long duration = previousHours.intValue()*1000*60*60 + previousMinutes.intValue()*1000*60 + previousSeconds.intValue()*1000;
        targetTask.addDuration(duration);
        targetTask.setState(Task.STATE_STARTED);
        task.addDuration(-duration);
        firePropertyChange("time_changed", null, null);
    }//GEN-LAST:event_btOKActionPerformed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        Tools.recordActivity();
    }//GEN-LAST:event_formMouseEntered

    private void lbSelectTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbSelectTimeMouseClicked
        if(evt.getClickCount() == 2){
            setTime(this.task.getDuration());
        }
    }//GEN-LAST:event_lbSelectTimeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOK;
    private javax.swing.JComboBox cmbSelectTask;
    private javax.swing.JLabel lbColumn1;
    private javax.swing.JLabel lbColumn2;
    private javax.swing.JLabel lbSelectTask;
    private javax.swing.JLabel lbSelectTime;
    private javax.swing.JPanel pnButtons;
    private javax.swing.JSpinner spHours;
    private javax.swing.JSpinner spMinutes;
    private javax.swing.JSpinner spSeconds;
    // End of variables declaration//GEN-END:variables
    /** Task whose time should be transferred to another task. */
    private Task task;
    /** Last correct value of hours specified by user. */
    private Integer previousHours = new Integer(0);
    /** Last correct value of minutes specified by user. */
    private Integer previousMinutes = new Integer(0);
    /** Last correct value of seconds specified by user. */
    private Integer previousSeconds = new Integer(0);
    
    /** Check whether time required for the transfer is not greater than
     * duration of the source task.
     */
    private void checkDuration() {
        Integer seconds = (Integer) spSeconds.getValue();
        Integer minutes = (Integer) spMinutes.getValue();
        Integer hours = (Integer) spHours.getValue();
        long duration = seconds.intValue()*1000 + minutes.intValue()*1000*60 + hours.intValue()*1000*60*60;
        if (duration > task.getDuration()) {
            spSeconds.setValue(previousSeconds);
            spMinutes.setValue(previousMinutes);
            spHours.setValue(previousHours);
        } else {
            previousSeconds = (Integer) spSeconds.getValue();
            previousMinutes = (Integer) spMinutes.getValue();
            previousHours = (Integer) spHours.getValue();
        }
    }

    /** Sets the time to show in the dialog in ms.
     * @param time The time in ms to show.
     */
    public void setTime(long time) {
        // Calculate how many hours the provided time is.
        final Long hours = TimeUnit.HOURS.convert(time, TimeUnit.MILLISECONDS);
        // Subtract that from further calculations.
        time -= TimeUnit.HOURS.toMillis(hours);
        // Calculate the remainding minutes.
        final Long minutes = TimeUnit.MINUTES.convert(time, TimeUnit.MILLISECONDS);
        // Subtract that from further calculations.
        time -= TimeUnit.MINUTES.toMillis(minutes);
        // Convert the remainding ms to seconds, 500ms is added to properly round the result.
        final Long seconds = TimeUnit.SECONDS.convert(time + 500, TimeUnit.MILLISECONDS);
        Runnable runnable = new Runnable() {

            public void run() {
                spHours.setValue(hours.intValue());
                spMinutes.setValue(minutes.intValue());
                spSeconds.setValue(seconds.intValue());
            }
        };
        SwingUtilities.invokeLater(runnable);
    }
}
