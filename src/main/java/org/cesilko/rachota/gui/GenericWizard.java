/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://rachota.sourceforge.net/license.txt.
 *
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://rachota.sourceforge.net/license.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * The Original Software is Rachota.
 * The Initial Developer of the Original Software is Jiri Kovalsky
 * Portions created by Jiri Kovalsky are Copyright (C) 2010
 * All Rights Reserved.
 *
 * Contributor(s): Jiri Kovalsky
 * Created on Mar 5, 2010, 2:37:33 PM
 * GenericWizard.java
 */

package org.cesilko.rachota.gui;

import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.cesilko.rachota.core.Translator;

public class GenericWizard extends javax.swing.JDialog implements PropertyChangeListener {

    /** Array of wizard steps. */
    private Vector steps = null;
    /** Index of currently selected step. */
    private int selectedStep = 0;
    /** Map with wizard properties. */
    private static HashMap properties = new HashMap();


    /** Creates new form GenericWizard */
    public GenericWizard(String wizardTitle) {
        initComponents();
        setTitle(wizardTitle);
        setModal(true);
        steps = new Vector();
    }

    /** Adds new wizard step to this wizard.
     * @param wizardStep A wizard step to be added to this wizard.
     */
    public void addWizardStep(WizardStep wizardStep) {
        steps.add(wizardStep);
        addPropertyChangeListener(wizardStep);
        String stepDescription = wizardStep.getDescription();
        JLabel lbStep = new JLabel("" + steps.size() + ". " + stepDescription);
        java.awt.GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        gridBagConstraints.gridy = steps.size();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnSteps.add(lbStep, gridBagConstraints);
        selectStep(0); // Display first step
    }

    /** Returns font that should be used for all widgets in this component
     * based on the language preferences specified by user.
     * @return Font to be used in this component.
     */
    @Override
    public java.awt.Font getFont() {
        return Tools.getFont();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnOverview = new javax.swing.JPanel();
        lbLogo = new javax.swing.JLabel();
        pnSteps = new javax.swing.JPanel();
        lbPreview = new javax.swing.JLabel();
        spSeparator = new javax.swing.JSeparator();
        pnStep = new javax.swing.JPanel();
        lbStatus = new javax.swing.JLabel();
        pnButtons = new javax.swing.JPanel();
        btPrevious = new javax.swing.JButton();
        btNext = new javax.swing.JButton();
        btFinish = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnOverview.setMaximumSize(new java.awt.Dimension(200, 83));
        pnOverview.setMinimumSize(new java.awt.Dimension(200, 83));
        pnOverview.setPreferredSize(new java.awt.Dimension(200, 83));
        pnOverview.setLayout(new java.awt.GridBagLayout());

        lbLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cesilko/rachota/gui/images/logo_name_48.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnOverview.add(lbLogo, gridBagConstraints);

        pnSteps.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        pnOverview.add(pnSteps, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnOverview.add(lbPreview, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnOverview, gridBagConstraints);

        spSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spSeparator, gridBagConstraints);

        pnStep.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnStep, gridBagConstraints);

        lbStatus.setFont(getFont());
        lbStatus.setForeground(java.awt.Color.red);
        lbStatus.setMinimumSize(new java.awt.Dimension(20, 20));
        lbStatus.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(lbStatus, gridBagConstraints);

        pnButtons.setForeground(java.awt.Color.red);
        pnButtons.setLayout(new java.awt.GridBagLayout());

        btPrevious.setFont(getFont());
        btPrevious.setMnemonic(Translator.getMnemonic("WIZARD.BT_PREVIOUS"));
        btPrevious.setText(Translator.getTranslation("WIZARD.BT_PREVIOUS"));
        btPrevious.setToolTipText(Translator.getTranslation("WIZARD.BT_PREVIOUS_TOOLTIP"));
        btPrevious.setEnabled(false);
        btPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPreviousActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btPrevious, gridBagConstraints);

        btNext.setFont(getFont());
        btNext.setMnemonic(Translator.getMnemonic("WIZARD.BT_NEXT"));
        btNext.setText(Translator.getTranslation("WIZARD.BT_NEXT"));
        btNext.setToolTipText(Translator.getTranslation("WIZARD.BT_NEXT_TOOLTIP"));
        btNext.setEnabled(false);
        btNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btNext, gridBagConstraints);

        btFinish.setFont(getFont());
        btFinish.setMnemonic(Translator.getMnemonic("WIZARD.BT_FINISH"));
        btFinish.setText(Translator.getTranslation("WIZARD.BT_FINISH"));
        btFinish.setToolTipText(Translator.getTranslation("WIZARD.BT_FINISH_TOOLTIP"));
        btFinish.setEnabled(false);
        btFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFinishActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btFinish, gridBagConstraints);

        btCancel.setFont(getFont());
        btCancel.setMnemonic(Translator.getMnemonic("WIZARD.BT_CANCEL"));
        btCancel.setText(Translator.getTranslation("WIZARD.BT_CANCEL"));
        btCancel.setToolTipText(Translator.getTranslation("WIZARD.BT_CANCEL_TOOLTIP"));
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnButtons, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Method called when user pushed Cancel button.
     * @param evt Event that generated this call.
     */
    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        firePropertyChange("wizard_canceled", null, null);
        setVisible(false);
    }//GEN-LAST:event_btCancelActionPerformed

    /** Method called when user pushed Finish button.
     * @param evt Event that generated this call.
     */
    private void btFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFinishActionPerformed
        firePropertyChange("wizard_finished", null, null);
        finishWizard();
    }//GEN-LAST:event_btFinishActionPerformed

    /** Method called when user pushed Next button.
     * @param evt Event that generated this call.
     */
    private void btNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextActionPerformed
        selectStep(selectedStep + 1);
    }//GEN-LAST:event_btNextActionPerformed

    /** Method called when user pushed Previous button.
     * @param evt Event that generated this call.
     */
    private void btPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousActionPerformed
        selectStep(selectedStep - 1);
    }//GEN-LAST:event_btPreviousActionPerformed

    /** Method called when new wizard step is selected.
     * @param index Number of step to be displayed.
     */
    private void selectStep(int index) {
        selectedStep = index;
        pnStep.removeAll();
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1;
        gridBagConstraints.weighty = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
        WizardStep step = (WizardStep) steps.get(selectedStep);
        pnStep.add(step, gridBagConstraints);
        for (int i = 0; i < steps.size(); i++) {
            JLabel lbStep = (JLabel) pnSteps.getComponent(i);
            if (i == selectedStep) lbStep.setFont(getFont().deriveFont(Font.BOLD));
            else lbStep.setFont(getFont());
        }
        checkButtons();
        repaint();
        step.setFocus();
    }

    /** Method called when something changed and buttons should verify their state.
     * Most probably Next button should be enabled or disabled.
     */
    public void checkButtons() {
        btPrevious.setEnabled(selectedStep != 0);
        WizardStep step = (WizardStep) steps.get(selectedStep);
        if (selectedStep == steps.size() - 1) btNext.setEnabled(false);
        else btNext.setEnabled(step.isSetCorrectly());
        if (selectedStep != steps.size() - 1) btFinish.setEnabled(false);
        else btFinish.setEnabled(step.isSetCorrectly());
    }

    /** Sets preview of wizard result.
     * @param preview Image to be set as preview.
     */
    public void setPreview(ImageIcon preview) {
        lbPreview.setIcon(preview);
    }

    /** Sets given wizard property.
     * @param propertyName Name of property to be set.
     * @param property New value of given property.
     */
    public static void setWizardProperty(String propertyName, Object property) {
        properties.put(propertyName, property);
    }

    /** Returns property of wizard identified by its name.
     * @param propertyName Name of property to be returned.
     * @return Object representing value of given property.
     */
    public static Object getWizardProperty(String propertyName) {
        return properties.get(propertyName);
    }

    /** Method called when property of some wizard step changed.
     * @param evt Event that generated this call.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();
        Object property = evt.getNewValue();
        setWizardProperty(propertyName, property);
    }

    /** Sets new status text.
     * @param status New status text.
     */
    public void setStatus(String status) {
        lbStatus.setText(status);
    }

    /** Acts like a Next button is pressed. */
    protected void goNextStep() {
        btNextActionPerformed(null);
    }

    /** Acts like a Cancel button is pressed. */
    protected void cancelWizard() {
        btCancelActionPerformed(null);
    }

    /** Acts like a Finish button is pressed. */
    protected void finishWizard() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btFinish;
    private javax.swing.JButton btNext;
    private javax.swing.JButton btPrevious;
    private javax.swing.JLabel lbLogo;
    private javax.swing.JLabel lbPreview;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JPanel pnButtons;
    private javax.swing.JPanel pnOverview;
    private javax.swing.JPanel pnStep;
    private javax.swing.JPanel pnSteps;
    private javax.swing.JSeparator spSeparator;
    // End of variables declaration//GEN-END:variables

}